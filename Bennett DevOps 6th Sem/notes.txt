1. Create node js project
  - npm init
  - npm init -y

2. Install express
  - npm install express --save

3. Start node server
  - node app.js

4. Show all process in docker
  -> docker ps -a

5. Show all running process in docker
  -> docker ps

6. Build image
  -> docker build .
- Build image with a name
  -> docker build -t docker-node-app .

7. Remove image
  -> docker image rm imageName

8. Build and Run container
  -> docker run -p 3000:3000 --name node-app docker-node-app
  - -p for port number
  - node-app container : name
  - docker-node-app : image name

  -> docker run -d -p 3000:3000 --name node-app docker-node-app
  - -d : detached mode

  -> docker stop container_name
  - to stop the docker

9. Remove container
  -> docker rm container_name
  -> docker rm container_name -f
  - -f is for forcefully removing container

10. Get inside docker working directory
  -> docker exec -it node-app bash


Bind Mount volume and Sync code

For windows command prompt
- docker run -v %cd%:/app -p 3000:3000 -d --name node-app docker-node-app

For windows powershell / mac / linux
- docker run -v ${pwd}:/app -p 3000:3000 -d --name node-app docker-node-app

Problem
- if we delete node_modules from our working directory then it will be syncd with /app directory and delete node_modules from there as well

Solution
- Anonymous Solution
- docker run -v ${pwd}:/app -v /app/node_modules -p 3000:3000 -d --name node-app docker-node-app


Problem
- If we do any change in /app directory then it will be reflected in our working directory

Solution
- Read only Mount volume
- docker run -v ${pwd}:/app:ro -v /app/node_modules -p 3000:3000 -d --name node-app docker-node-app


How to use Environemnt Variable ?
- Send port number through Environemnt variable

- docker run -v ${pwd}:/app:ro -v /app/node_modules --env PORT=4000 -p 3000:4000 -d --name node-app docker-node-app

Now we want to send PORT number through .env file
- docker run -v ${pwd}:/app:ro -v /app/node_modules --env-file ./.env -p 3000:4000 -d --name node-app docker-node-app


How to handle volumes ?

List all volumes
- docker volume ls

Delete unused volumes
- docker volume prune

Delete container + volume
- docker rm node-app -fv


Problem :
- command is too large to remember
- how we are going to handle multiple containers

Solution
- Docker Compose

Run Docker Compose
- docker-compose up -d

Delete Docker Compose
- docker-compose down
- docker-compose down -v
  = -v will delete unused anonymous volumes

Re-build image while running docker compose
- docker-compose up -d --build
  - it will force build new image everytime


Now we want to move from dev to prod Environemnt


Run docker for dev envrionment
- docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d

- docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --build
  - forcefully build image...because docker-compose didn't pick changes


Run docker for prod envrionment
- docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build

Remove docker for dev envrionment
- docker-compose -f docker-compose.yml -f docker-compose.dev.yml down -v

Remove docker for prod envrionment
- docker-compose -f docker-compose.yml -f docker-compose.prod.yml down -v


Now add a new service for mongo-db

Now enter in mongo-db container
- docker exec -it mongoContainer bash
- cd bin
- mongosh -u "username" -p "password"

show databases
- show dbs;

create database
- use db_name

create collection
- db.createCollection("collectionName")

But when we build database and store data inside that then it will be removed once we remove container

So the solution is to create a named volume

Updated Command to Remove docker
- docker-compose -f docker-compose.yml -f docker-compose.dev.yml down
  - now we don't want to remove volume... so we delete -v flag


Shortcut to enter in mongo db shell
- docker exec -it mongoContainer /bin/mongosh -u "username" -p "password"

Now let's connect mongo-db with Node...
So we want to install mongoose
To connect Node with mongo-db container we want IP address of mongo-db container

- docker inspect containerName


How to handle order of containers in docker ?
- Add dependency in our service

Run docker with no dependency
- docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --no-deps node-app



Use this code in nginx->default.conf

server {
    listen:80;

    location/api {
      // this will set request headers
      // X-Real-IP is set to IP Address
        proxy_set_header X-Real-IP $remote_addr;
        
        // X-Forwarded-For = header is set to original client IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        // 
        proxy_set_header Host $http_host
        proxy_pass http://node-app:3000;
        proxy_redirect off;
    }
}



Run docker for dev envrionment with 2 instances
- docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --scale node-app=2


1. Create EC2 Instance (Ubuntu)
2. Install docker and docker-compose
3. Push code on Git
4. Pull code on EC2
5. Do changes in docker-compose-prod.yml
6. Create .env file on EC2
  - vi .env
  - press i to switch to insert mode
  - then paste this code

export NODE_ENV=production
export MONGO_USER=root
export MONGO_PASSWORD=root
export MONGO_INITDB_ROOT_USERNAME=root
export MONGO_INITDB_ROOT_PASSWORD=root

  - press :wq

7. Run docker-compose-prod on EC2
8. Copy IP of EC2 and replace localhost in postman and test application


Install Docker on EC2
sudo apt-get update
sudo apt-get install docker.io -y
sudo usermod -aG docker $USER
newgrp docker
sudo chmod 777 /var/run/docker.sock


Install Docker-Compose
- sudo apt-get install docker-compose


Push Code on Git
git add .
git commit -m "Docker CRUD"
git branch -M main
git remote add origin URL
git push -u origin main


Push changes only
git add .
git commit -m "Docker CRUD"
git push


Pull code on EC2


Run docker compose on EC2
- docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

